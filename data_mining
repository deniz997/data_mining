{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "data_mining_test_2021_01_10.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5HyHvHWuXgqj"
      },
      "source": [
        "# Einleitung\n",
        "\n",
        "**Problemstellung:** Das Finanzdienstleistungsunternehmen BestFinansBir (BF1) möchte als neues Finanzprodukt die BF1Kart bei seinen Kunden einführen. Allerdings will BF1 nicht jeden Kunden willkürlich diesbezüglich kontaktieren, da dies zu hohen Marketingkosten führt. \n",
        "\n",
        "**Ziel:** Es soll ein Data-Mining-Modell entwickelt werden, welches die Kunden, die die BF1Kart erwerben werden, identifizieren soll. \n",
        "\n",
        "**Datensatz:** Der Datensatz besteht aus Kundeninformationen. Die .csv Datei, der die Informationen enthält, wurde einfachheitshalber auf GitHub hochgeladen und kann somit jederzeit abgerufen werden.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NML1m1ERpjoA"
      },
      "source": [
        "# Bibliotheken"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lombAtPBoFQm",
        "outputId": "eb2c9e7f-ef44-451d-f838-8e4c9d03776d"
      },
      "source": [
        "!pip install sklearn\n",
        "!pip install pandas\n",
        "!pip install matplotlib\n",
        "!pip install -U imbalanced-learn\n",
        "\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn import preprocessing\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "import json\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import confusion_matrix, plot_confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.under_sampling import ClusterCentroids\n",
        "from datetime import datetime"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: sklearn in /usr/local/lib/python3.6/dist-packages (0.0)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.6/dist-packages (from sklearn) (0.24.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->sklearn) (1.0.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->sklearn) (2.1.0)\n",
            "Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->sklearn) (1.19.4)\n",
            "Requirement already satisfied: scipy>=0.19.1 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->sklearn) (1.4.1)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (1.1.5)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.6/dist-packages (from pandas) (2.8.1)\n",
            "Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.6/dist-packages (from pandas) (1.19.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (3.2.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (0.10.0)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.19.4)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.8.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.4.7)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler>=0.10->matplotlib) (1.15.0)\n",
            "Requirement already up-to-date: imbalanced-learn in /usr/local/lib/python3.6/dist-packages (0.7.0)\n",
            "Requirement already satisfied, skipping upgrade: scikit-learn>=0.23 in /usr/local/lib/python3.6/dist-packages (from imbalanced-learn) (0.24.0)\n",
            "Requirement already satisfied, skipping upgrade: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from imbalanced-learn) (1.0.0)\n",
            "Requirement already satisfied, skipping upgrade: scipy>=0.19.1 in /usr/local/lib/python3.6/dist-packages (from imbalanced-learn) (1.4.1)\n",
            "Requirement already satisfied, skipping upgrade: numpy>=1.13.3 in /usr/local/lib/python3.6/dist-packages (from imbalanced-learn) (1.19.4)\n",
            "Requirement already satisfied, skipping upgrade: threadpoolctl>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from scikit-learn>=0.23->imbalanced-learn) (2.1.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tjbdxfPJY9ao"
      },
      "source": [
        "# Unterstützende Funktionen"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jdrtq_hnY6t3"
      },
      "source": [
        "def write_random_search_params(data,search_num):\n",
        "  filename=str(search_num)+\".json\"\n",
        "  with open(filename,\"w\") as outfile:\n",
        "    json.dump(data, outfile,indent=4)\n",
        "\n",
        "def read_search_params(search_num):\n",
        "  filename=\"09-01-2021-20-23.json\"\n",
        "  with open(filename,\"r\") as json_file:\n",
        "      data = json.load(json_file)\n",
        "      return data\n",
        "\n",
        "def format_datetime(mydatetime):\n",
        "    if type(mydatetime) == datetime:\n",
        "        formatted = f'{mydatetime:%d-%m-%Y-%H-%M}'\n",
        "    else:\n",
        "        formatted = datetime.strptime(mydatetime, '%Y-%m-%d %H:%M:%S.%f')\n",
        "        formatted = f'{formatted:%d.%m.%Y | %H:%M}'\n",
        "    return formatted\n",
        "\n",
        "\n",
        "# CONFIG\n",
        "read_from_text_file = False\n",
        "datanametoread = \"searchtimestamp\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KuHM2Lakgt06"
      },
      "source": [
        "# Initialisieren von Random Seed\n",
        "np.random.seed(4711)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ORjT_drphX9"
      },
      "source": [
        "# Importieren des Datensatzes\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 648
        },
        "id": "czz4g3SMntMP",
        "outputId": "12f48b03-ec18-400a-930c-2fcd4785bd4e"
      },
      "source": [
        "missing_values = [\"unbekannt\"] ## \"Unbekannt\" Werte werden als fehlende Werte behandelt. \n",
        "df = pd.read_csv(\"https://raw.githubusercontent.com/omerrcem/datamining-505/main/bank_marketing_adal_v1.0.csv\", sep=';', na_values=missing_values)\n",
        "df.head(20)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Alter</th>\n",
              "      <th>Beruf</th>\n",
              "      <th>Familienstand</th>\n",
              "      <th>Ausbildung</th>\n",
              "      <th>Ausgefallen</th>\n",
              "      <th>Kontostand</th>\n",
              "      <th>Eigentum</th>\n",
              "      <th>Darlehen</th>\n",
              "      <th>Dauer</th>\n",
              "      <th>Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>31</td>\n",
              "      <td>Freiberufler</td>\n",
              "      <td>verheiratet</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>162</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28</td>\n",
              "      <td>Beamter</td>\n",
              "      <td>verheiratet</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>1595</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>39</td>\n",
              "      <td>Techniker</td>\n",
              "      <td>geschieden</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>17441</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>54</td>\n",
              "      <td>Arbeitslos</td>\n",
              "      <td>geschieden</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>925</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24</td>\n",
              "      <td>Techniker</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>-156</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>27</td>\n",
              "      <td>Techniker</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>-69</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>40</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Hochschulabschluss</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30</td>\n",
              "      <td>Servicekraft</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Hochschulabschluss</td>\n",
              "      <td>0</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>23</td>\n",
              "      <td>Student</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>27</td>\n",
              "      <td>Arbeitslos</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Mittlere Reife</td>\n",
              "      <td>0</td>\n",
              "      <td>93</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>35</td>\n",
              "      <td>Angestellter</td>\n",
              "      <td>geschieden</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>172</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>44</td>\n",
              "      <td>Arbeitslos</td>\n",
              "      <td>verheiratet</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>317</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>27</td>\n",
              "      <td>Beamter</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>321</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>22</td>\n",
              "      <td>Servicekraft</td>\n",
              "      <td>ledig</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>739</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>35</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Hochschulabschluss</td>\n",
              "      <td>0</td>\n",
              "      <td>1120</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>31</td>\n",
              "      <td>Servicekraft</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>1</td>\n",
              "      <td>-248</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>21</td>\n",
              "      <td>Angestellter</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Mittlere Reife</td>\n",
              "      <td>0</td>\n",
              "      <td>-42</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>geschieden</td>\n",
              "      <td>Hochschulabschluss</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>34</td>\n",
              "      <td>NaN</td>\n",
              "      <td>geschieden</td>\n",
              "      <td>Hochschulabschluss</td>\n",
              "      <td>0</td>\n",
              "      <td>70</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>27</td>\n",
              "      <td>Techniker</td>\n",
              "      <td>ledig</td>\n",
              "      <td>Allgemeine Hochschulreife</td>\n",
              "      <td>0</td>\n",
              "      <td>78</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Alter         Beruf Familienstand  ... Darlehen  Dauer  Label\n",
              "0      31  Freiberufler   verheiratet  ...        1      0      1\n",
              "1      28       Beamter   verheiratet  ...        0      1      0\n",
              "2      39     Techniker    geschieden  ...        1      1      1\n",
              "3      54    Arbeitslos    geschieden  ...        0      2      0\n",
              "4      24     Techniker         ledig  ...        0      4      0\n",
              "5      27     Techniker         ledig  ...        0      4      0\n",
              "6      40           NaN         ledig  ...        1      4      0\n",
              "7      30  Servicekraft         ledig  ...        0      4      0\n",
              "8      23       Student         ledig  ...        0      4      0\n",
              "9      27    Arbeitslos         ledig  ...        0      4      0\n",
              "10     35  Angestellter    geschieden  ...        0      4      0\n",
              "11     44    Arbeitslos   verheiratet  ...        1      4      0\n",
              "12     27       Beamter         ledig  ...        1      4      0\n",
              "13     22  Servicekraft         ledig  ...        0      4      0\n",
              "14     35           NaN         ledig  ...        0      4      0\n",
              "15     31  Servicekraft         ledig  ...        0      5      0\n",
              "16     21  Angestellter         ledig  ...        0      5      0\n",
              "17     45           NaN    geschieden  ...        0      5      0\n",
              "18     34           NaN    geschieden  ...        0      5      0\n",
              "19     27     Techniker         ledig  ...        1      5      0\n",
              "\n",
              "[20 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3pAAfenjpaOu"
      },
      "source": [
        "# Data Understanding"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fCjt3rDzaivb"
      },
      "source": [
        "## Typen der Merkmale"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-0Pkidbkoi14",
        "outputId": "cf843e51-6161-4a49-8c45-1e26436a028a"
      },
      "source": [
        "df.dtypes"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Alter             int64\n",
              "Beruf            object\n",
              "Familienstand    object\n",
              "Ausbildung       object\n",
              "Ausgefallen       int64\n",
              "Kontostand        int64\n",
              "Eigentum          int64\n",
              "Darlehen          int64\n",
              "Dauer             int64\n",
              "Label             int64\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8UR0pXLtLgYA"
      },
      "source": [
        "## Dimensionen des Datensatzes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wc7RWZoCpYfj",
        "outputId": "de906bac-c6cf-4000-8748-0613095d58c0"
      },
      "source": [
        "df.shape "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(20493, 10)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "45J4fk6_LkC-"
      },
      "source": [
        "Der Datensatz hat 20493 Zeilen und 10 Merkmale"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JQoeTgmdbUvE"
      },
      "source": [
        "## Gesamte Anzahl der fehlenden Werte innerhalb der einzelnen Merkmalen"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xedSjRtTqV3c",
        "outputId": "04b3ae86-9b45-4c25-97ca-56885acbe521"
      },
      "source": [
        "print(df.isnull().sum())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Alter               0\n",
            "Beruf            4535\n",
            "Familienstand       0\n",
            "Ausbildung        803\n",
            "Ausgefallen         0\n",
            "Kontostand          0\n",
            "Eigentum            0\n",
            "Darlehen            0\n",
            "Dauer               0\n",
            "Label               0\n",
            "dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": false,
        "pycharm": {
          "name": "#%% md\n"
        },
        "id": "9_hgcKYaXA1o"
      },
      "source": [
        "# Behandeln der fehlenden Werte\n",
        "\n",
        "In diesem Schritt werden die mit 1 und 0 gekennzeichneten Daten getrennt behandelt. Jeder fehlender Wert wird entsprechend zu seinem Merkmal durch den am meisten vorkommenden Wert ersetzt. Nachdem der fehlende Wert ersetzt wurde, werden die mit 1 und 0 gekennzeichneten Daten wieder zusammengeführt."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "id": "x8jQ3kNjXA1p"
      },
      "source": [
        "df_positive = df.query(\"Label == 1\")\n",
        "\n",
        "imp = SimpleImputer(strategy=\"most_frequent\")\n",
        "df_new_positive = pd.DataFrame( imp.fit_transform(df_positive))\n",
        "df_new_positive.index = df_positive.index\n",
        "df_new_positive.columns = df_positive.columns\n",
        "df_positive = df_new_positive\n",
        "\n",
        "df_negative = df.query(\"Label == 0\")\n",
        "imp = SimpleImputer(strategy=\"most_frequent\")\n",
        "df_new_negative = pd.DataFrame(imp.fit_transform(df_negative))\n",
        "df_new_negative.index = df_negative.index\n",
        "df_new_negative.columns = df_negative.columns\n",
        "df_negative = df_new_negative\n",
        "\n",
        "df = pd.concat([df_positive, df_negative], sort=True).sort_index()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OED2iUlTGlrC"
      },
      "source": [
        "# Label-Encoding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 648
        },
        "id": "G2bM1Tgf402U",
        "outputId": "cd42a279-d05f-4047-ffd4-ea8f2c71549e"
      },
      "source": [
        "le = LabelEncoder()\n",
        "\n",
        "df[['Beruf', 'Familienstand', 'Ausbildung']] = df[['Beruf', 'Familienstand', 'Ausbildung']].apply(le.fit_transform)\n",
        "df.head(20)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Alter</th>\n",
              "      <th>Ausbildung</th>\n",
              "      <th>Ausgefallen</th>\n",
              "      <th>Beruf</th>\n",
              "      <th>Darlehen</th>\n",
              "      <th>Dauer</th>\n",
              "      <th>Eigentum</th>\n",
              "      <th>Familienstand</th>\n",
              "      <th>Kontostand</th>\n",
              "      <th>Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>162</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1595</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>39</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>17441</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>925</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-156</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>-69</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>40</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>43</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>27</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>93</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>172</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>317</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>321</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>739</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>35</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1120</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>-248</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>-42</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>45</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>34</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>70</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>78</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Alter  Ausbildung Ausgefallen  ...  Familienstand Kontostand Label\n",
              "0     31           0           0  ...              2        162     1\n",
              "1     28           0           0  ...              2       1595     0\n",
              "2     39           0           0  ...              0      17441     1\n",
              "3     54           0           0  ...              0        925     0\n",
              "4     24           0           0  ...              1       -156     0\n",
              "5     27           0           0  ...              1        -69     0\n",
              "6     40           1           0  ...              1         15     0\n",
              "7     30           1           0  ...              1         21     0\n",
              "8     23           0           0  ...              1         43     0\n",
              "9     27           2           0  ...              1         93     0\n",
              "10    35           0           0  ...              0        172     0\n",
              "11    44           0           0  ...              2        317     0\n",
              "12    27           0           0  ...              1        321     0\n",
              "13    22           0           0  ...              1        739     0\n",
              "14    35           1           0  ...              1       1120     0\n",
              "15    31           0           1  ...              1       -248     0\n",
              "16    21           2           0  ...              1        -42     0\n",
              "17    45           1           0  ...              0          0     0\n",
              "18    34           1           0  ...              0         70     0\n",
              "19    27           0           0  ...              1         78     0\n",
              "\n",
              "[20 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "txG23GD6pQ-L"
      },
      "source": [
        "min_max_scaler = preprocessing.MinMaxScaler()\n",
        "scaled_val = min_max_scaler.fit_transform(df)\n",
        "df.loc[:,:] = scaled_val"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": false,
        "pycharm": {
          "name": "#%% md\n"
        },
        "id": "pD8mjCTXXA1x"
      },
      "source": [
        "# Zuweisung der Daten "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "id": "lsRMn9m9XA1x"
      },
      "source": [
        "X = np.array(df.iloc[:,0:-1])\n",
        "Y = np.array(df.iloc[:,-1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": false,
        "id": "WBuXOF2qXA1x"
      },
      "source": [
        "## Aufteilung des Datensatzes in Train und Test"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "id": "C4nXN21zXA1y"
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=4711, stratify=Y);\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": false,
        "id": "f3DAEPQcXA1y"
      },
      "source": [
        "# Oversampling\n",
        "\n",
        "Da der Datensatz sehr unausgewogen ist, kann man durch Oversampling einen balancierten Datensatz erzeugen. Hier wird das durch \"Synthetic Minority Oversampling Technique\" erzielt. Da wir jedoch einen sehr kleinen Datensatz haben, hat in diesem Fall Oversampling keinen großen Einfluss."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "i6HIszDaXA1y",
        "outputId": "17c12ac8-79fa-4c56-bbf4-4c8cb8f28984"
      },
      "source": [
        "\"\"\"\n",
        "smote = SMOTE(random_state=4711)\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
        "print(\"X Train:\",X_train.shape)\n",
        "print(\"Y Train:\", y_train.shape)\n",
        "print(\"X Train resampled:\",X_train_resampled.shape)\n",
        "print(\"Y Train resampled:\", y_train_resampled.shape)\n",
        "X_train = X_train_resampled\n",
        "y_train = y_train_resampled\n",
        "\"\"\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'\\nsmote = SMOTE(random_state=4711)\\nX_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\\nprint(\"X Train:\",X_train.shape)\\nprint(\"Y Train:\", y_train.shape)\\nprint(\"X Train resampled:\",X_train_resampled.shape)\\nprint(\"Y Train resampled:\", y_train_resampled.shape)\\nX_train = X_train_resampled\\ny_train = y_train_resampled\\n'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vf8vnY01K0R7"
      },
      "source": [
        "# Training"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pATtFSgcIOSs"
      },
      "source": [
        "## Hyperparameter Tuning\n",
        "\n",
        "Hier wird der Wertebereich für die einzelnen Hyperparameter bestimmt."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BqZOT0oxZT6I"
      },
      "source": [
        "n_estimators = [int(x) for x in np.linspace(start = 50, stop = 300, num = 30)]\n",
        "# Number of features to consider at every split\n",
        "max_features = ['auto', 'sqrt']\n",
        "# Maximum number of levels in tree\n",
        "max_depth = [int(x) for x in np.linspace(3, 20, num = 10)]\n",
        "# Minimum number of samples required to split a node\n",
        "min_samples_split = [2,6,10]\n",
        "# Minimum number of samples required at each leaf node\n",
        "min_samples_leaf = [2]\n",
        "class_weight = [\"balanced\"]\n",
        "# Method of selecting samples for training each tree\n",
        "# bootstrap = [True]\n",
        "# Create the random grid\n",
        "random_grid = {'n_estimators': n_estimators,\n",
        "               'max_features': max_features,\n",
        "               'max_depth': max_depth,\n",
        "               \"class_weight\": class_weight,\n",
        "               'min_samples_split': min_samples_split,\n",
        "               'min_samples_leaf': min_samples_leaf}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": false,
        "id": "WxJLwaE-XA2A"
      },
      "source": [
        "Ausprobieren von zufälligen Werten um die bestmöglichen Hyperparameter herauszufinden"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m1Qv-ukSPnq0",
        "outputId": "abf59700-3d0a-4a46-cf0e-6210a78bc250"
      },
      "source": [
        "if not read_from_text_file:\n",
        " \n",
        "  rf = RandomForestClassifier(random_state=4711, oob_score=True, ccp_alpha=0.015)\n",
        "  clf = RandomizedSearchCV(rf,random_grid,n_iter=50,random_state=4711,cv=10, verbose=1, n_jobs=8)\n",
        "  model = clf.fit(X_train, y_train)\n",
        "\n",
        "  myparams = model.best_estimator_.get_params()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 10 folds for each of 50 candidates, totalling 500 fits\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yqZKZwKaK91P"
      },
      "source": [
        "## Erstellen des Modells"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sds9um-hajMm",
        "outputId": "891307ea-9708-4c2d-e604-b337d33eb1ba"
      },
      "source": [
        "if not read_from_text_file:\n",
        "  pass\n",
        "else:\n",
        "  mydict = read_search_params(datanametoread)\n",
        "  if mydict is not None:\n",
        "    myparams = mydict[\"best_params\"]\n",
        "  else:\n",
        "    myparams = {\"random_state\": 4711}\n",
        "\n",
        "print(myparams)\n",
        "\n",
        "myparams[\"ccp_alpha\"] = 0.0005\n",
        "\n",
        "rfcnew=RandomForestClassifier()\n",
        "rfcnew.set_params(**myparams)\n",
        "rfcnew.fit(X_train, y_train)\n",
        "y_pred=rfcnew.predict(X_test)\n",
        "y_train_pred = rfcnew.predict(X_train)\n",
        "\n",
        "# Model Accuracy, how often is the classifier correct?\n",
        "test_accuracy= metrics.accuracy_score(y_test, y_pred)\n",
        "train_accuracy = metrics.accuracy_score(y_train, y_train_pred)\n",
        "print(\"Test-Accuracy:\",test_accuracy)\n",
        "print(\"Train-Accuracy:\",train_accuracy)\n",
        "print(\"Balanced Test-Accuracy:\",metrics.balanced_accuracy_score(y_test, y_pred))\n",
        "print(\"Balanced Train-Accuracy:\",metrics.balanced_accuracy_score(y_train, y_train_pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'bootstrap': True, 'ccp_alpha': 0.015, 'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_impurity_split': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 274, 'n_jobs': None, 'oob_score': True, 'random_state': 4711, 'verbose': 0, 'warm_start': False}\n",
            "Test-Accuracy: 0.819128171763175\n",
            "Train-Accuracy: 0.8354827466016034\n",
            "Balanced Test-Accuracy: 0.824642253054037\n",
            "Balanced Train-Accuracy: 0.8393322408800501\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iOIxnS0lKsAl"
      },
      "source": [
        "# print(\"OOB Score:\", rfcnew.oob_score_)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FvDWXMu-KrOD"
      },
      "source": [
        "# Evaluation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x9lu4hTNIBUo"
      },
      "source": [
        "## Confusion Matrix\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "CNsJcXrWx-KY",
        "outputId": "6c13765f-3541-4cea-c487-e71723ed1882"
      },
      "source": [
        "plot_confusion_matrix(rfcnew, X_test,y_test,normalize=\"true\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fcbfec2f518>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M_7tHjDsKhpO"
      },
      "source": [
        "## F1 Score"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gov7lxhVuExj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "09cd89fc-1bcd-459e-83ab-43229905412c"
      },
      "source": [
        "f1_score = metrics.f1_score(y_test, y_pred, average=\"weighted\")\n",
        "# training score\n",
        "f1_score_train = metrics.f1_score(y_train, y_train_pred, average=\"weighted\")\n",
        "print(\"F1 score for test set: \",f1_score)\n",
        "print(\"F1 score for train set: \",f1_score_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "F1 score for test set:  0.8286419543826339\n",
            "F1 score for train set:  0.8435091537005809\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X1uvSku9VdSN"
      },
      "source": [
        "## Precision-Recall Score"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ai50d4QVhfk",
        "outputId": "535abae9-53d9-441a-ae82-1ae50c8eb475"
      },
      "source": [
        "precision = metrics.precision_score(y_test, y_pred, average=\"weighted\")\n",
        "print(\"Precision score: \", precision)\n",
        "recall = metrics.recall_score(y_test, y_pred, average=\"weighted\")\n",
        "print(\"Recall score: \", recall)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision score:  0.8557036114555923\n",
            "Recall score:  0.819128171763175\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z96TUDTBSuPs"
      },
      "source": [
        "## AUC & ROC Plot"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 595
        },
        "id": "RLqT9u4SPgXG",
        "pycharm": {
          "name": "#%%\n"
        },
        "outputId": "8740e331-2f20-416f-f28e-32584ab6cc6c"
      },
      "source": [
        "test_auc_score = metrics.roc_auc_score(y_test, rfcnew.predict_proba(X_test)[:, 1], average=\"weighted\")\n",
        "\n",
        "print(\"AUC for test data:\",test_auc_score )\n",
        "\n",
        "print(\"Training data\")\n",
        "metrics.plot_roc_curve(rfcnew, X_train, y_train)  \n",
        "plt.show()\n",
        "\n",
        "print(\"Test data\")\n",
        "metrics.plot_roc_curve(rfcnew, X_test, y_test)\n",
        "plt.show()  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "AUC for test data: 0.9068638398396013\n",
            "Training data\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Test data\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}